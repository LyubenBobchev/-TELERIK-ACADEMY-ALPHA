@model SensorViewModel

<h2>Details...</h2>
<script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="https://www.amcharts.com/lib/3/serial.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
<link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
<script src="https://www.amcharts.com/lib/3/themes/light.js"></script>

@Styles.Render("~/bundles/tables-css")
<!-- Example DataTables Card-->
<div class="card mb-3">
    <div class="card-header">
        <i class="fa fa-table"></i> My Sensors
    </div>
    <div class="table-responsive">
        <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Measurement Type</th>
                    <th>Polling Interval</th>
                    <th>Description</th>
                    <th>Current Value</th>
                    @if (!Model.IsPublic)
                    {
                        <th>Public</th>
                    }
                    @if (!Model.IsReadOnly)
                    {
                        <th>Funcionality</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Model.Name</td>
                    <td>@Model.MeasurementType</td>
                    <td>@Model.PollingInterval</td>
                    <td>@Model.Description</td>
                    <td id="@Model.Id">@Model.CurrentValue</td>
                    @if (!Model.IsPublic)
                    {
                        <td>@Model.IsPublic</td>
                    }
                    <td>
                        @if (!Model.IsReadOnly)
                        {
                            @Html.ActionLink("[Shared With...]", "SharedWith", "Share",
                                        new { id = @Model.Id }, new { })

                            @Html.ActionLink("[X]", "DeleteUserSensor", "Sensor",
                                        new { id = @Model.Id }, new { })
                        }
                    </td>
                </tr>
            </tbody>
        </table>

    </div>

    <div id="chartdiv"></div>

    <!-- /.container-fluid-->
    <!-- /.content-wrapper-->

    @section  scripts{
        @Scripts.Render("~/bundles/tables-js")
        <script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
        <script src="~/signalr/hubs"></script>
        <script src="~/Scripts/update-db.js"></script>

        <script type="text/javascript">

        startSignalRUpdate([@Model.Id]);

        $('a').on('click', function () {
            let href = $(this).attr('href')
            data.push(@Model.Id);
            let id = href.split('/').reverse()[0]
            $('.div-form').attr('hidden', 'hidden')
            let divId = '#' + id;
            $(divId).removeAttr('hidden')
            })

            
        var chart;
         $.ajax({
             url: "@Html.Raw(@Url.Action("GetHistoryDataForSensor", "History", new {area = "Sensor", sensorId = Model.Id, isValueType = Model.IsValueType }))",
            dataType: "JSON",
            complete: function (chartData) {
                chartData = JSON.parse(chartData.responseJSON);
                console.log("chart ", chartData);
                chart = AmCharts.makeChart("chartdiv", {
                    "type": "serial",
                    "theme": "light",
                    "marginRight": 80,
                    "dataProvider": chartData,
                    "valueAxes": [{
                        "position": "left",
                        "title": "Value"
                    }],
                    "graphs": [{
                        "id": "g1",
                        "fillAlphas": 0,
                        "bulletSize": 2,
                        "lineThickness": 4,
                        "valueField": "Value",
                        "balloonText": "<div style='margin:5px; font-size:19px;'>Value:<b>[[value]]</b></div>"
                    }],
                    "chartScrollbar": {
                        "graph": "g1",
                        "scrollbarHeight": 80,
                        "backgroundAlpha": 0,
                        "selectedBackgroundAlpha": 0.1,
                        "selectedBackgroundColor": "#888888",
                        "graphFillAlpha": 0,
                        "graphLineAlpha": 0.5,
                        "selectedGraphFillAlpha": 0,
                        "selectedGraphLineAlpha": 1,
                        "autoGridCount": true,
                        "color": "#AAAAAA"
                    },
                    "chartCursor": {
                        "categoryBalloonDateFormat": "YYYY-MM-DD HH:NN:SS",
                        "cursorPosition": "mouse"
                    },
                    "categoryField": "timeStamp",
                    "categoryAxis": {
                        "minPeriod": "ss",
                        "parseDates": true
                    },
                    "export": {
                        "enabled": true,
                        "dateFormat": "YYYY-MM-DD HH:NN:SS"
                    }
                });

                chart.addListener("dataUpdated", zoomChart);
                // when we apply theme, the dataUpdated event is fired even before we add listener, so
                // we need to call zoomChart here
                zoomChart();
                // this method is called when chart is first inited as we listen for "dataUpdated" event
                function zoomChart() {
                    // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
                    chart.zoomToIndexes(chartData.length - 250, chartData.length - 100);
                }
            }
            })
        </script>

    }
